#ifndef __start_h__
#define __start_h__ 
#include <stdbool.h>
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef unsigned long DWORD;
#ifdef __GCC__
typedef unsigned long long QWORD;
// Some nice typedefs, to standardise sizes across platforms.
// These typedefs are written for 32-bit X86.
typedef unsigned int   u32int;
typedef          int   s32int;
typedef unsigned short u16int;
typedef          short s16int;
typedef unsigned char  u8int;
typedef          char  s8int;
#endif
//#define DEBUG 1

#define HOST_MEMORY_SIZE  0x1000000
#define GUEST_MEMORY_SIZE 0x400000
//#define HOST_GDT_LOC = 0x

#define ASM_START #asm
#define ASM_END #endasm

//Remark this out to disable nested paging
#define USE_NESTED_PAGING
#define MODULE_START_BEGIN_ADDRESS 0x9000
#define OFFSET_TO_GUEST_PHYSICAL_PAGES 0x0
#define HOST_CR3_VALUE 0x70000
#define HOST_CR3_FINAL_VALUE 0x611000
#define GUEST_CR3_VALUE 0x366000
#define GUEST_INITIAL_CR0 0x00000010
#define NESTED_PAGING_DIRECTORY_ADDRESS 0x1A000
#define NESTED_PAGING_TABLE_ADDRESS 0x1B000
#define NESTED_PAGING_DIR_FINAL_ADDRESS 0x621000
#define NESTED_PAGING_TAB_FINAL_ADDRESS 0x622000
#define NESTED_CR3_VALUE 0x621000 //NOTE: Same as NESTED_PAGING_DIR_FINAL
#define HOST_STACK_SEG_BASE 0x500000
#define VMCB_START_ADDRESS 0x20000
#define VMCB_FINAL_ADDRESS 0x600000
#define VISOR_FINAL_ADDRESS 0x800000
#define HOST_HSAVE_AREA 0x681000
#define HOST_TSS_FINAL 0x680000
#define TASK_STACK_FINAL 0x690000  //0x10000 bytes
#define HOST_GDT 0x60000
#define HOST_IDT 0x65000
#define HOST_GDT_FINAL 0x810000
#define HOST_IDT_FINAL 0x720000
#define HOST_IDT_CODE_FINAL 0x800000
#define HOST_GDT_R_LOAD 0x6FF000;
#define LOG_MEMORY_ADDRESS_START 0x700000
#define NESTED_PAGING_PHYSICAL_TRANSLATION 0x01
#define NESTED_PAGING_GUEST_PAGING_TRANSLATION 0x02
#define HOST_TSS_SEGMENT 0x58
#define SW_INT_DETAILS_ADDRESS 0x400000

#define VMCB_CONTROL_INTERCEPT_CR_READ 0x0
#define VMCB_CONTROL_INTERCEPT_CR_WRITE 0x2
#define VMCB_CONTROL_INTERCEPT_BYTE_08 0x08
#define VMCB_CONTROL_INTERCEPT_BYTE_10 0x10
#define VMCB_CONTROL_INTERCEPT_BYTE_0C 0x0C
#define VMCB_CONTROL_IOPM_BASE_PA 0x40
#define VMCB_CONTROL_TLB_CONTROL 0x58
#define VMCB_CONTROL_EXITCODE 0x70
#define VMCB_CONTROL_EXITINFO1 0X78
#define VMCB_CONTROL_EXITINFO1_HIDWORD 0x7C
#define VMCB_CONTROL_EXITINFO2 0X80
#define VMCB_CONTROL_EXITINTINFO 0X88
#define VMCB_CONTROL_NESTED_PAGING 0x90		//144
#define VMCB_CONTROL_EVENTINJ 0xa8
#define VMCB_CONTROL_EVENT_VALID 0xaC
#define VMCB_CONTROL_NESTED_CR3 0xb0		//176
#define VMCB_CONTROL_CLEAN_BITS 0xC0
#define VMCB_CONTROL_NRIP 0xC8

#define VMCB_SAVE_STATE_RIP 0x578
#define VMCB_SAVE_STATE_ES 0x400
#define VMCB_SAVE_STATE_CS 0x410
#define VMCB_SAVE_STATE_SS 0x420
#define VMCB_SAVE_STATE_DS 0x430
#define VMCB_SAVE_STATE_FS 0x440
#define VMCB_SAVE_STATE_GS 0x450
#define VMCB_SAVE_STATE_GDTR 0x460
#define VMCB_SAVE_STATE_IDTR 0x480
#define VMCB_SAVE_STATE_CPL 0x4cB
#define VMCB_SAVE_STATE_EFER 0x4D0
#define VMCB_SAVE_STATE_CR4 0x548
#define VMCB_SAVE_STATE_CR3 0x550
#define VMCB_SAVE_STATE_CR0 0x558
#define VMCB_SAVE_STATE_CR2 0x640
#define VMCB_SAVE_STATE_RFLAGS 0x570
#define VMCB_SAVE_STATE_RSP 0x5D8
#define VMCB_SAVE_STATE_RSP 0x5D8
#define VMCB_SAVE_STATE_RAX 0x5F8
#define VMCB_IOIO_DEF 0x1000

#define VMEXIT_CR0_READ 0x00
#define VMEXIT_CR3_READ 0x03
#define VMEXIT_CR0_WRITE 0x10
#define VMEXIT_CR1_WRITE 0x11
#define VMEXIT_CR2_WRITE 0x12
#define VMEXIT_CR3_WRITE 0x13
#define VMEXIT_CR4_WRITE 0x14
#define VMEXIT_CR5_WRITE 0x15
#define VMEXIT_CR6_WRITE 0x16
#define VMEXIT_CR7_WRITE 0x17
#define VMEXIT_CR8_WRITE 0x18
#define VMEXIT_CR9_WRITE 0x19
#define VMEXIT_CR10_WRITE 0x1A
#define VMEXIT_CR11_WRITE 0x1B
#define VMEXIT_CR12_WRITE 0x1C
#define VMEXIT_CR13_WRITE 0x1D
#define VMEXIT_CR14_WRITE 0x1E
#define VMEXIT_CR15_WRITE 0x1F

#define VMEXIT_EXCEPTION_00 0x40
#define VMEXIT_EXCEPTION_01 0x41
#define VMEXIT_EXCEPTION_02 0x42
#define VMEXIT_EXCEPTION_03 0x43
#define VMEXIT_EXCEPTION_04 0x44
#define VMEXIT_EXCEPTION_05 0x45
#define VMEXIT_EXCEPTION_06 0x46
#define VMEXIT_EXCEPTION_07 0x47
#define VMEXIT_EXCEPTION_08 0x48
#define VMEXIT_EXCEPTION_09 0x49
#define VMEXIT_EXCEPTION_10 0x4a
#define VMEXIT_EXCEPTION_11 0x4b
#define VMEXIT_EXCEPTION_12 0x4c
#define VMEXIT_EXCEPTION_13 0x4d
#define VMEXIT_PF   0x04e
#define VMEXIT_EXCEPTION_15 0x4f
#define VMEXIT_EXCEPTION_16 0x50
#define VMEXIT_EXCEPTION_17 0x51
#define VMEXIT_EXCEPTION_18 0x52
#define VMEXIT_EXCEPTION_19 0x53
#define VMEXIT_EXCEPTION_20 0x54
#define VMEXIT_EXCEPTION_21 0x55
#define VMEXIT_EXCEPTION_22 0x56
#define VMEXIT_EXCEPTION_23 0x57
#define VMEXIT_EXCEPTION_24 0x58
#define VMEXIT_EXCEPTION_25 0x59
#define VMEXIT_EXCEPTION_26 0x5a
#define VMEXIT_EXCEPTION_27 0x5b
#define VMEXIT_EXCEPTION_28 0x5c
#define VMEXIT_EXCEPTION_29 0x5d
#define VMEXIT_EXCEPTION_30 0x5e
#define VMEXIT_EXCEPTION_31 0x5f
#define VMEXIT_INTR 0x60
#define VMEXIT_NMI 0x61
#define VMEXIT_CR0_SEL_WRITE 0x65
#define VMEXIT_PUSHF 0x70
#define VMEXIT_IRET 0x74
#define VMEXIT_SWINT 0x75
#define VMEXIT_HLT 0x78
#define VMEXIT_IOIO 0x7B
#define VMEXIT_SHUTDOWN 0x7F
#define VMEXIT_NPF  0x400

#define DEBUG_IN_HANDLEPAGINGEXCEPTION 0xA0
#define DEBUG_NP_DIRECTORY_TRANSLATION 0x10
#define DEBUG_GU_DIRECTORY_TRANSLATION 0x11
#define DEBUG_NP_TABLE_TRANSLATION 0x12
#define DEBUG_GU_TABLE_TRANSLATION 0x13
#define DEBUG_NP_GUEST_PHYSICAL_TRANSLATION 0x30
#define DEBUG_PHYSICALADDRESS_TRANSLATED_SUCCESSFULLY 0xAA00
#define	DEBUG_PAGINGADDRESS_TRANSLATED_SUCCESSFULLY 0xAB00
#define DEBUG_PAGINGADDRESS_AND_NESTED_TRANS_SUCCESSFULLY 0xAC00

#define DEBUG_BAD_FAULT_ADDRESS 0xFF
#define DEBUG_NO_TRANSLATION_REQUIRED 0xEE

#define GVAR_AREA 0x650000
#define var_IDT_OFFSET GVAR_AREA + 0		//4 bytes
#define PORT_DIRECTION_IN 1

#define MODRM_REG_EAX 0
#define MODRM_REG_ECX 1
#define MODRM_REG_EDX 2
#define MODRM_REG_EBX 3
#define MODRM_REG_ESP 4
#define MODRM_REG_EBP 5
#define MODRM_REG_ESI 6
#define MODRM_REG_EDI 7

//NOTE: Opcode bytes are read into variables in reverse order
#define OPCODE_CLTS 0x060F
#define OPCODE_SMSW 0x010F	// /4
#define OPCODE_LMSW 0x010F  // /6

#define OPEN_UP_DS	__asm__("push eax\n mov eax, 0x10\n push eax\n pop ds\n pop eax\n");
#define RESTORE_DS __asm__("push eax\n mov eax, 0x38\n push eax\n pop ds\n pop eax\n");

#define SET_GUEST_CARRY_FLAG SetVMCBD(VMCB_SAVE_STATE_RFLAGS, GetVMCBD(VMCB_SAVE_STATE_RFLAGS) | 0x1);
#define CLEAR_GUEST_CARRY_FLAG SetVMCBD(VMCB_SAVE_STATE_RFLAGS, GetVMCBD(VMCB_SAVE_STATE_RFLAGS) & 0xFFFFFFFE);
#define GUEST_IN_PROTECTED_MODE ( (GetVMCBB(VMCB_SAVE_STATE_CR0) & 0x01) && ((GetVMCBD(VMCB_SAVE_STATE_RFLAGS) & 0x20000) != 0x20000) )
#define GUEST_IN_V8086_MODE ((GetVMCBD(VMCB_SAVE_STATE_RFLAGS) & 0x20000) == 0x20000)
#define C_SPT_ADDR 0xfff0
#define C_HEADS_ADDR 0xfff4
#define C_CYLS_ADDR 0xfff8
#define RAI_EBX 0
#define RAI_ECX 4
#define RAI_EDX 8
#define RAI_ESI 12
#define RAI_EDI 16
#define RAI_EBP 20
#define RAI_FS 24
#define RAI_GS 28
#define RAN_EBX 0
#define RAN_ECX 1
#define RAN_EDX 2
#define RAN_ESI 3
#define RAN_EDI 4
#define RAN_EBP 5
#define RAN_FS 6
#define RAN_GS 7
enum eRegisters 
{
    EAX,
            EBX,
            ECX,
            EDX,
            ESI,
            EDI,
            EBP,
            ESP,
            CS,
            DS,
            ES,
            FS,
            GS,
            SS,
            CR0,
            CR4,
            CR8
};
#define SELECTOR_VISOR_DATA 0x38
#define SELECTOR_ALL_MEM 0x10
#define START_MODULE_SPT_ADDR 0xfff0

#endif   //#ifndef __start_h__

